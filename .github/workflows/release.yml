name: Release
on:
  pull_request:
    branches: [main]
    paths-ignore:
      - "**/*.md"
  push:
    branches: [main]
    tags: ["v*.*.*"] # Ex. v0.1.0, v0.1.1-rc2

permissions:
  contents: write
  packages: write

env:
  APPLICATION_NAME: "indexer"
  GO_VERSION: "1.24"

defaults:
  run:
    shell: bash

concurrency:
  group: ${{ github.ref }}-${{ github.workflow }}-${{ github.actor }}
  cancel-in-progress: true

jobs:
  pre_release:
    name: Pre-release build
    runs-on: ubuntu-latest
    outputs:
      VERSION: ${{ steps.output-version.outputs.VERSION }}
    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-go@v5
        with:
          cache: false
          go-version: ${{ env.GO_VERSION }}

      - uses: actions/cache@v4
        with:
          path: |
            ~/go/pkg/mod
            ~/go/bin
          key: pre-release-${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}

      - id: build-test
        name: Build artifacts (test)
        if: github.event_name != 'push' || !contains(github.ref, 'refs/tags/')
        run: |
          VERSION=${{ github.sha }}
          mkdir -p dist

          # Build for Linux
          GOOS=linux GOARCH=amd64 go build -v -o dist/${{ env.APPLICATION_NAME }}-linux-amd64 ./cmd/${{ env.APPLICATION_NAME }}
          chmod +x dist/${{ env.APPLICATION_NAME }}-linux-amd64
          tar czf dist/${{ env.APPLICATION_NAME }}_${VERSION}_linux_amd64.tar.gz -C dist ${{ env.APPLICATION_NAME }}-linux-amd64

          # Build for macOS
          GOOS=darwin GOARCH=amd64 go build -v -o dist/${{ env.APPLICATION_NAME }}-darwin-amd64 ./cmd/${{ env.APPLICATION_NAME }}
          chmod +x dist/${{ env.APPLICATION_NAME }}-darwin-amd64
          tar czf dist/${{ env.APPLICATION_NAME }}_${VERSION}_darwin_amd64.tar.gz -C dist ${{ env.APPLICATION_NAME }}-darwin-amd64

          # Build for Windows
          GOOS=windows GOARCH=amd64 go build -v -o dist/${{ env.APPLICATION_NAME }}-windows-amd64.exe ./cmd/${{ env.APPLICATION_NAME }}
          zip dist/${{ env.APPLICATION_NAME }}_${VERSION}_windows_amd64.zip dist/${{ env.APPLICATION_NAME }}-windows-amd64.exe

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - id: build-release
        name: Build artifacts (release)
        if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          mkdir -p dist

          # Build for Linux
          GOOS=linux GOARCH=amd64 go build -v -o dist/${{ env.APPLICATION_NAME }}-linux-amd64 ./cmd/${{ env.APPLICATION_NAME }}
          chmod +x dist/${{ env.APPLICATION_NAME }}-linux-amd64
          tar czf dist/${{ env.APPLICATION_NAME }}_${VERSION}_linux_amd64.tar.gz -C dist ${{ env.APPLICATION_NAME }}-linux-amd64

          # Build for macOS
          GOOS=darwin GOARCH=amd64 go build -v -o dist/${{ env.APPLICATION_NAME }}-darwin-amd64 ./cmd/${{ env.APPLICATION_NAME }}
          chmod +x dist/${{ env.APPLICATION_NAME }}-darwin-amd64
          tar czf dist/${{ env.APPLICATION_NAME }}_${VERSION}_darwin_amd64.tar.gz -C dist ${{ env.APPLICATION_NAME }}-darwin-amd64

          # Build for Windows
          GOOS=windows GOARCH=amd64 go build -v -o dist/${{ env.APPLICATION_NAME }}-windows-amd64.exe ./cmd/${{ env.APPLICATION_NAME }}
          zip dist/${{ env.APPLICATION_NAME }}_${VERSION}_windows_amd64.zip dist/${{ env.APPLICATION_NAME }}-windows-amd64.exe

          echo "VERSION=${VERSION}" >> $GITHUB_OUTPUT

      - id: output-version
        run: |
          if [ "${{ github.event_name }}" == "push" ] && [[ "${{ github.ref }}" == refs/tags/* ]]; then
            echo "VERSION=${{ steps.build-release.outputs.VERSION }}" >> $GITHUB_OUTPUT
          else
            echo "VERSION=${{ steps.build-test.outputs.VERSION }}" >> $GITHUB_OUTPUT
          fi

      - uses: actions/upload-artifact@v4
        with:
          name: release-dist
          path: dist/

  pre_release_test:
    needs: pre_release
    name: Pre-release test (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    outputs:
      VERSION: ${{ needs.pre_release.outputs.VERSION }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]

    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist/

      - name: Test (Linux)
        if: matrix.os == 'ubuntu-latest'
        run: |
          tar xf dist/${{ env.APPLICATION_NAME }}_${{ needs.pre_release.outputs.VERSION }}_linux_amd64.tar.gz
          test -f ${{ env.APPLICATION_NAME }}-linux-amd64

      - name: Test (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          tar xf dist/${{ env.APPLICATION_NAME }}_${{ needs.pre_release.outputs.VERSION }}_darwin_amd64.tar.gz
          test -f ${{ env.APPLICATION_NAME }}-darwin-amd64

      - name: Test (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          Expand-Archive -Force dist/${{ env.APPLICATION_NAME }}_${{ needs.pre_release.outputs.VERSION }}_windows_amd64.zip
          if (!(Test-Path dist/${{ env.APPLICATION_NAME }}-windows-amd64.exe)) { exit 1 }

  release:
    if: github.event_name == 'push' && contains(github.ref, 'refs/tags/')
    needs: pre_release_test
    name: Release
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/download-artifact@v4
        with:
          name: release-dist
          path: dist/

      - id: create_release
        uses: actions/github-script@60a0d83039c74a4aee543508d2ffcb1c3799cdea # v7.0.1
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          result-encoding: string
          script: |
            try {
              const response = await github.rest.repos.createRelease({
                owner: context.repo.owner,
                repo: context.repo.repo,
                tag_name: context.ref.replace('refs/tags/', ''),
                name: context.ref.replace('refs/tags/', ''),
                draft: false,
                prerelease: false,
                generate_release_notes: true,
              });
              return response.data.id;
            } catch (error) {
              core.setFailed(error.message);
            }

      - name: Upload Linux asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ format('https://uploads.github.com/repos/{0}/releases/{1}/assets?name={2}', github.repository, steps.create_release.outputs.result, format('{0}_{1}_linux_amd64.tar.gz', env.APPLICATION_NAME, needs.pre_release_test.outputs.VERSION)) }}
          asset_path: dist/${{ env.APPLICATION_NAME }}_${{ needs.pre_release_test.outputs.VERSION }}_linux_amd64.tar.gz
          asset_name: ${{ env.APPLICATION_NAME }}_${{ needs.pre_release_test.outputs.VERSION }}_linux_amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload macOS asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ format('https://uploads.github.com/repos/{0}/releases/{1}/assets?name={2}', github.repository, steps.create_release.outputs.result, format('{0}_{1}_darwin_amd64.tar.gz', env.APPLICATION_NAME, needs.pre_release_test.outputs.VERSION)) }}
          asset_path: dist/${{ env.APPLICATION_NAME }}_${{ needs.pre_release_test.outputs.VERSION }}_darwin_amd64.tar.gz
          asset_name: ${{ env.APPLICATION_NAME }}_${{ needs.pre_release_test.outputs.VERSION }}_darwin_amd64.tar.gz
          asset_content_type: application/gzip

      - name: Upload Windows asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ format('https://uploads.github.com/repos/{0}/releases/{1}/assets?name={2}', github.repository, steps.create_release.outputs.result, format('{0}_{1}_windows_amd64.zip', env.APPLICATION_NAME, needs.pre_release_test.outputs.VERSION)) }}
          asset_path: dist/${{ env.APPLICATION_NAME }}_${{ needs.pre_release_test.outputs.VERSION }}_windows_amd64.zip
          asset_name: ${{ env.APPLICATION_NAME }}_${{ needs.pre_release_test.outputs.VERSION }}_windows_amd64.zip
          asset_content_type: application/zip
